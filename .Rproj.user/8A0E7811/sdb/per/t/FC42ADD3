{
    "collab_server" : "",
    "contents" : "library(readr)\nlibrary(data.table)\n\nmovies <- read_csv(\"D:/ACAP/FYP/R/Recommender Apps/Recommender Engine/ml-latest-small/ml-latest-small/movies.csv\")\nView(movies)\nratings <- read_csv(\"D:/ACAP/FYP/R/Recommender Apps/Recommender Engine/ml-latest-small/ml-latest-small/ratings.csv\")\nView(ratings)\n\n#===============================================================================================\n\ngenres <- as.data.frame(movies$genres, stringsAsFactors=FALSE)\n\ngenres2 <- as.data.frame(tstrsplit(genres[,1], '[|]', type.convert=TRUE), stringsAsFactors=FALSE)\ncolnames(genres2) <- c(1:10)\n\n#===============================================================================================\n\n#genre_list <- c(\"Action\", \"Adventure\", \"Animation\", \"Children\", \"Comedy\", \"Crime\",\"Documentary\", \"Drama\", \"Fantasy\",\"Film-Noir\", \"Horror\", \"Musical\", \"Mystery\",\"Romance\",\"Sci-Fi\", \"Thriller\", \"War\", \"Western\")\n\ngenre_list <- c(\"Adventure\", \"Comedy\", \"Action\", \"Drama\", \"Crime\", \"Children\", \"Mystery\", \"Documentary\", \"Animation\", \"Thriller\", \"Horror\", \"Fantasy\", \"Film-Noir\", \"Wester\", \"Romance\", \"Sci-fi\", \"Musical\", \"War\", \"Animation\", \"IMAX\")\n\n\ngenre_matrix <- matrix(0,9126,20) #empty matrix\ngenre_matrix[1,] <- genre_list #set first row to genre list\ncolnames(genre_matrix) <- genre_list #set column names to genre list\n\n#iterate through matrix\nfor (i in 1:nrow(genres2)) {\n  for (c in 1:ncol(genres2)) {\n    genmat_col = which(genre_matrix[1,] == genres2[i,c])\n    genre_matrix[i+1,genmat_col] <- 1\n  }\n}\n\n#convert into dataframe\ngenre_matrix2 <- as.data.frame(genre_matrix[-1,], stringsAsFactors=FALSE) #remove first row, which was the genre list\nfor (c in 1:ncol(genre_matrix2)) {\n  genre_matrix2[,c] <- as.integer(genre_matrix2[,c])\n} #convert from characters to integers\n\n#================================================================================================\n\n\nbinaryratings <- ratings\nfor (i in 1:nrow(binaryratings)){\n  if (binaryratings[i,3] > 3){\n    binaryratings[i,3] <- 1\n  }\n  else{\n    binaryratings[i,3] <- -1\n  }\n}\n\n#================================================================================================\n\nbinaryratings2 <- dcast(binaryratings, movieId~userId, value.var = \"rating\", na.rm=FALSE)\nfor (i in 1:ncol(binaryratings2)){\n  binaryratings2[which(is.na(binaryratings2[,i]) == TRUE),i] <- 0\n}\nbinaryratings2 = binaryratings2[,-1] #remove movieIds col. Rows are movieIds, cols are userIds\n\n#================================================================================================\n\n#Remove rows that are not rated from movies dataset\nmovieIds <- length(unique(movies$movieId)) #9125\nratingmovieIds <- length(unique(ratings$movieId)) #9066\nmovies2 <- movies[-which((movieIds %in% ratingmovieIds) == FALSE),]\nrownames(movies2) <- NULL\n#Remove rows that are not rated from genre_matrix2\ngenre_matrix3 <- genre_matrix2[-which((movieIds %in% ratingmovieIds) == FALSE),]\nrownames(genre_matrix3) <- NULL\n\n#===============================================================================================\n\n#Calculate dot product for User Profiles\nresult = matrix(0,20,671)\nfor (c in 1:ncol(binaryratings2)){\n  for (i in 1:ncol(genre_matrix3)){\n    result[i,c] <- sum((genre_matrix3[,i]) * (binaryratings2[,c]))\n  }\n}\n\n#Convert to Binary scale\nfor (i in 1:nrow(result)){\n  if (result[i] < 0){\n    result[i] <- 0\n  }\n  else {\n    result[i] <- 1\n  }\n}\n\n\n#=============================================================================================\n\nresult2 <- result[20,] #First user's profile\n\nsim_mat <- rbind.data.frame(result2, genre_matrix3)\nsim_mat <- data.frame(lapply(sim_mat,function(x){as.integer(x)})) #convert data to type integer\n\n#Calculate Jaccard distance between user profile and all movies\nlibrary(proxy)\nsim_results <- dist(sim_mat, method = \"Jaccard\")\nsim_results <- as.data.frame(as.matrix(sim_results[1:9066]))\nrows <- which(sim_results == min(sim_results))\n#Recommended movies\nmovies[rows,2]\n\n#============================================================================================\n\nmovies[rows,]\n",
    "created" : 1484625736927.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3902747066",
    "id" : "FC42ADD3",
    "lastKnownWriteTime" : 1484635106,
    "last_content_update" : 1484635106840,
    "path" : "D:/ACAP/FYP/R/Recommender Apps/Recommender Apps4/content-based-engine.R",
    "project_path" : "content-based-engine.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}